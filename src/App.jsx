/* -----------------------------------------------------------
   src/App.jsx  ‚Äï  Food-Alias  &  Fixed-Order  Edition
   -----------------------------------------------------------
   5 ‰∫∫„Çí„ÄåËâ≤ √ó È£ü„ÅπÁâ©„Äç„Å´ÂåøÂêçÂåñ„Åó„ÄÅÂá°‰æã„ÇÇÊåáÂÆöÈ†Ü„ÅßË°®Á§∫„Åó„Åæ„Åô

      suzuki   üçé Apple      (red)     A
      kato     ü´ê Blueberry  (blue)    B
      shen     ü•¨ Cabbage    (green)   C
      shiotani üçä Dekopon    (orange)  D
      takase   üçÜ Eggplant   (purple)  E
   ----------------------------------------------------------- */

import { useEffect, useState, useMemo } from 'react';
import { MapContainer, TileLayer, Polyline, Marker } from 'react-leaflet';
import L from 'leaflet';
import Papa from 'papaparse';
import { gpx as gpxToGeoJSON } from '@tmcw/togeojson';
import './App.css';

/* ---------- ‰∫∫ ‚áÑ Á∑öËâ≤Ôºà„Éû„Éº„Ç´„ÉºÊû†Ëâ≤„ÇÇÂÖ±ÈÄöÔºâ ---------- */
const COLORS = {
  suzuki  : '#e41a1c',   // red
  kato    : '#377eb8',   // blue
  shen    : '#4daf4a',   // green
  shiotani: '#ff7f00',   // orange
  takase  : '#984ea3',   // purple
  default : '#888',
};
const colorOf = p => COLORS[p] ?? COLORS.default;

/* ---------- ÂåøÂêçË°®Á§∫ÂêçÔºà„Ç¢„Ç§„Ç≥„É≥‰ªòÔºâ ---------- */
const DISPLAY = {
  suzuki  : 'üçé Apple',
  kato    : 'ü´ê Blueberry',
  shen    : 'ü•¨ Cabbage',
  shiotani: 'üçä Dekopon',
  takase  : 'üçÜ Eggplant',
  default : 'Unknown',
};
const displayOf = p => DISPLAY[p] ?? DISPLAY.default;

/* ---------- Âá°‰æã„ÅÆ‰∏¶„Å≥È†Ü„ÇíÂõ∫ÂÆö ---------- */
const ORDER = ['suzuki','kato','shen','shiotani','takase'];

/* ---------- ÂÜôÁúü„Ç´„ÉÜ„Ç¥„É™ ‚Üí „Éê„ÉÉ„Ç∏ÁµµÊñáÂ≠ó ---------- */
const CAT_ICON = {
  'È£ü„ÅπÁâ©'            : 'üçΩÔ∏è',
  'È¢®ÊôØ'              : 'üèûÔ∏è',
  '‰∫∫ÔºàÁü•„Å£„Å¶„Çã‰∫∫Ôºâ'   : 'üë§',
  'Ê§çÁâ©'              : 'üå±',
  'Âª∫Áâ©ÔºàÂ§ñÊôØÔºâ'       : 'üè¢',
  '‰ΩìÈ®ì„ÉªÁô∫Ë¶ã'         : 'üí°',
  '„Åù„ÅÆ‰ªñ'            : 'üìå',
};

/* ---------- 2025-04-22 ÔΩû 2025-05-13 „ÅÆÂÖ®Êó•„É™„Çπ„Éà ---------- */
const START = new Date('2025-04-22');
const END   = new Date('2025-05-13');
const FULL_DAYS = (() => {
  const a=[];
  for(let d=new Date(START); d<=END; d.setDate(d.getDate()+1)){
    a.push(`${String(d.getMonth()+1).padStart(2,'0')}${String(d.getDate()).padStart(2,'0')}`);
  }
  return a;
})();

/* =================================================================== */

export default function App(){
  const [photos,setPhotos] = useState([]);
  const [routes,setRoutes] = useState([]);
  const [day,   setDay   ] = useState('');
  const [sel,   setSel   ] = useState(null);
  const [lines, setLines ] = useState([]);

  /* ---------- CSV (path,ts,lat,lng,cat) ---------- */
  useEffect(()=>{
    (async()=>{
      const txt  = await (await fetch('/data/photos.csv')).text();
      const rows = Papa.parse(txt,{delimiter:',',skipEmptyLines:true}).data;
      setPhotos(rows.map(([path,ts,lat,lng,cat])=>{
        const [person,file] = path.split('/');
        return {
          person,file,cat,
          url : `/photos/${person}/${file}`,
          ts,
          mmdd: ts.slice(5,7)+ts.slice(8,10),
          lat:+lat, lng:+lng,
        };
      }));
    })();
  },[]);

  /* ---------- GPX index ---------- */
  useEffect(()=>{
    fetch('/routes/index.json').then(r=>r.json()).then(setRoutes);
  },[]);

  /* ---------- „Éó„É´„ÉÄ„Ç¶„É≥Êó•‰ªò ---------- */
  const days=useMemo(()=>FULL_DAYS,[]);
  useEffect(()=>{ if(!day&&days.length) setDay(days[0]); },[days,day]);

  /* ---------- ÂΩìÊó•„ÅÆ„Éá„Éº„Çø ---------- */
  const dPhotos = photos.filter(p=>p.mmdd===day);
  const dRoutes = routes.filter(r=>r.mmdd===day);

  /* ---------- GPX ‚Üí polyline ---------- */
  useEffect(()=>{
    let dead=false;
    (async()=>{
      const arr=[];
      for(const r of dRoutes){
        try{
          const xml=await (await fetch(r.url)).text();
          const gj =gpxToGeoJSON(new DOMParser().parseFromString(xml,'text/xml'));
          gj.features.forEach(f=>{
            if(f.geometry.type==='LineString'){
              arr.push({
                coords: f.geometry.coordinates.map(([lo,la])=>[la,lo]),
                color : colorOf(r.person),
              });
            }
          });
        }catch(e){console.error('GPX',r.file,e);}
      }
      if(!dead) setLines(arr);
    })();
    return()=>{dead=true;};
  },[day]);

  /* ---------- ÂÜôÁúü„Éû„Éº„Ç´„ÉºÁî®„Ç¢„Ç§„Ç≥„É≥ ---------- */
  const iconFor = p => L.divIcon({
    html: `
      <div style="position:relative">
        <img src="${p.url}" style="
             width:42px;height:42px;object-fit:cover;
             border:2px solid ${colorOf(p.person)};
             border-radius:6px;box-shadow:0 0 4px rgba(0,0,0,.4);">
        <span class="badge">${CAT_ICON[p.cat] ?? '‚ùì'}</span>
      </div>`,
    className:'', iconSize:[42,42], iconAnchor:[21,21]
  });

  /* ---------- JSX ---------- */
  return(
    <div className="app" tabIndex={0} onKeyDown={e=>e.key==='Escape'&&setSel(null)}>

      {/* „Éò„ÉÉ„ÉÄ„Éº */}
      <header style={{marginLeft:60}}>
        Êó•‰ªò:&nbsp;
        <select value={day} onChange={e=>{setDay(e.target.value);setSel(null);}}>
          {days.map(d=><option key={d}>{d}</option>)}
        </select>

        <div className="legend">
          {ORDER.map(id=>(
            <div key={id}>
              <span style={{background:COLORS[id]}}/> {displayOf(id)}
            </div>
          ))}
        </div>
      </header>

      {/* Âú∞Âõ≥ */}
      <MapContainer center={[35.681,139.767]} zoom={13} style={{height:'100%'}}>
        <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"/>

        {lines.map((l,i)=>
          <Polyline key={i} positions={l.coords}
                    pathOptions={{color:l.color,weight:4}}/>
        )}

        {dPhotos.map(p=>
          <Marker key={`${p.person}_${p.mmdd}_${p.file}`}
                  position={[p.lat,p.lng]}
                  icon={iconFor(p)}
                  eventHandlers={{click:()=>setSel(p)}}/>
        )}
      </MapContainer>

      {/* ÊÉÖÂ†±„Éë„Éç„É´ */}
      {sel&&(
        <aside className="info">
          <button onClick={()=>setSel(null)}>√ó</button>
          <img src={sel.url} alt="preview"/>
          <ul>
            <li><b>person:</b> {displayOf(sel.person)}</li>
            <li><b>datetime:</b> {sel.ts}</li>
            <li><b>lat,lng:</b> {sel.lat},{sel.lng}</li>
            <li><b>category:</b> {sel.cat}</li>
            <li><b>file:</b> {sel.file}</li>
          </ul>
        </aside>
      )}
    </div>
  );
}
